name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Use cache if available, else install dependencies and cache them
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          # add dynamic cache key based on package-lock.json for invalidation
          key: deps-node-modules-${{ hashFiles('**/packages-lock.json') }}
      - name: Install dependencies
        # npm ci will automatically use cache if package-lock.json is unchanged
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm test
  build:
    needs: test
    runs-on: ubuntu-latest
    # Define the outputs of the build job
    outputs:
      # Access the script-file output from step by ID
      # steps[step-id].outputs[output-name]
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/packages-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        # Find all JS files in the dist/assets directory (linux command)
        # output-name = script-file
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

        # Deprecated old syntax
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifact
        # Download the artifact from the build job and unzip it
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output script-file
        # needs[build].outputs[output-name]
        run: echo ${{ needs.build.outputs.script-file }}
      - name: Deploy
        run: echo "Deploying website"
